/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import ConexionSQL.ConexionSQL;
import ValoresUsuario.Jugador;
import ValoresUsuario.Monstruo;
import ValoresUsuario.Usuario;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author migue
 */
public class Piso1 extends javax.swing.JFrame {
Jugador jugador = new Jugador();
//INTS PARA SETEAR LOS STATS A PARTE EN CASO DE TENER ARMA, ASI NO PERDER SUS VALORES
int dmg;
int hp;
int def;
int eva;
Monstruo enemigo = new Monstruo ();
//VARIABLES PARA EL SEGUIMIENTO
int causado = 0;
int curado = 0;
boolean mp = false;
boolean dmgextra  = false;
boolean elem = false;
//ventana donde se encuentra el nombree del personaje
charSelect select = new charSelect();



//variable para usar metodos
ConexionSQL gestion = new ConexionSQL();
//datos personaje


    /**
     * Creates new form Mapa1
     */
    public Piso1() {
        initComponents();
        // OCULTAR SKILLS
        this.Hab1.setVisible(false);
        this.Hab2.setVisible(false);
        this.Hab3.setVisible(false);
        this.Hab4.setVisible(false);
        this.Hab5.setVisible(false);
        this.Hab6.setVisible(false);
        this.skills.setVisible(false);
        //FIN OCULTAR SKILLS
        
        //CENTRAR PANTALLA
        setLocationRelativeTo(null);
        
        //CREAMOS ENEMIGOS
        enemigo.setNombre("Goblin");
        enemigo.setMaxHp(80);
        enemigo.setHp(80);
        enemigo.setNivel(1);
        enemigo.setAtq(6);
        enemigo.setDef(3);
        enemigo.setEva(5);
        enemigo.setExp(40);
        enemigo.setDinero(12);
        enemigo.setTcrit(3);
        enemigo.setDcrit(20);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Atacar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        CharInfo = new javax.swing.JTextArea();
        Pers = new javax.swing.JLabel();
        Iniciar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        enemyArea = new javax.swing.JTextArea();
        Hab1 = new javax.swing.JButton();
        skills = new javax.swing.JLabel();
        Hab2 = new javax.swing.JButton();
        Hab3 = new javax.swing.JButton();
        Hab4 = new javax.swing.JButton();
        Hab5 = new javax.swing.JButton();
        Hab6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Atacar.setText("Atacar");
        Atacar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AtacarMouseClicked(evt);
            }
        });
        Atacar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtacarActionPerformed(evt);
            }
        });

        Consola.setColumns(20);
        Consola.setRows(5);
        Consola.setText("ENFRENTAMIENTO CONTRA GOBLIN!\n\nEste enfrentamiento es simple, no es un combate\ncomplicado!.\n\nDale a iniciar cuando estes listo.");
        jScrollPane1.setViewportView(Consola);

        CharInfo.setColumns(20);
        CharInfo.setRows(5);
        jScrollPane2.setViewportView(CharInfo);

        Iniciar.setText("Iniciar");
        Iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IniciarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 3, 16)); // NOI18N
        jLabel1.setText("MAPA 1 - GOBLIN");

        enemyArea.setColumns(20);
        enemyArea.setRows(5);
        jScrollPane3.setViewportView(enemyArea);

        Hab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hab1ActionPerformed(evt);
            }
        });

        skills.setText("TUS HABILIDADES");

        Hab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hab2ActionPerformed(evt);
            }
        });

        Hab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hab3ActionPerformed(evt);
            }
        });

        Hab4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hab4ActionPerformed(evt);
            }
        });

        Hab5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hab5ActionPerformed(evt);
            }
        });

        Hab6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hab6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Iniciar)
                .addGap(250, 250, 250))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Hab6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(588, 588, 588))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Hab1, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                                    .addComponent(Hab2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Hab3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Hab4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Atacar)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(Hab5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(48, 48, 48))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(skills, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(222, 222, 222))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Pers, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 201, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Iniciar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Pers, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Atacar)
                        .addGap(29, 29, 29)
                        .addComponent(skills)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Hab1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Hab2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Hab3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Hab4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Hab5, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Hab6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //BOTONES PARA COMBATIR
    private void AtacarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtacarActionPerformed
 
        //Restamos salud al atacar
        causado = jugador.calcAtacar(jugador, enemigo);
        int recibido = enemigo.calcAtacar(jugador, enemigo);
        enemigo.setHp(enemigo.getHp()- causado);
        jugador.setHp(jugador.getHp()- recibido);
        seguimiento(causado, recibido, 0, false, true, false);
        finPartida(jugador,enemigo);
    }//GEN-LAST:event_AtacarActionPerformed

    private void AtacarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AtacarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_AtacarMouseClicked
    
    // BOTON PARA INICIAR EL COMBATE
    private void IniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IniciarActionPerformed
        String personaje = this.Pers.getText();
        System.out.println(personaje);
        //SETEAMOS AL JUGADOR CON SUS DATOS DE LA BASE DE DATOS
        jugador = gestion.setJugador(jugador, this.Pers.getText());
            //AÑADIMOS EN SUS RESPECTIVAS CONSOLAS, SUS TOSTRING
            CharInfo.setText(jugador.toString());
            enemyArea.setText(enemigo.toString());
        String arma = gestion.obtenerArma(personaje);
        String armadura = gestion.obtenerArmadura(personaje);
        jugador.equipo(jugador, arma, armadura);
            //Detectar habilidades
            
            //HABILIDADES DEL GUERRERO 
            if(jugador.getClase().equals("Guerrero")){
                if(jugador.getNivel() >= 10){
                    this.Hab6.setText("Ensartar");
                    this.Hab6.setVisible(true);
                    this.Hab5.setText("Golpe de berserker");
                    this.Hab5.setVisible(true);
                    this.Hab4.setText("Espada divina");
                    this.Hab4.setVisible(true);
                    this.Hab3.setText("Golpe de escudo");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Ejecutar");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Estocada");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if(jugador.getNivel() >= 8){
                    this.Hab5.setText("Golpe de berserker");
                    this.Hab5.setVisible(true);
                    this.Hab4.setText("Espada divina");
                    this.Hab4.setVisible(true);
                    this.Hab3.setText("Golpe de escudo");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Ejecutar");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Estocada");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if( jugador.getNivel() >= 6){
                    this.Hab4.setText("Espada divina");
                    this.Hab4.setVisible(true);
                    this.Hab3.setText("Golpe de escudo");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Ejecutar");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Estocada");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if( jugador.getNivel() >= 5){
                    this.Hab3.setText("Golpe de escudo");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Ejecutar");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Estocada");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if(jugador.getNivel() >= 3){
                   this.Hab2.setText("Ejecutar");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Estocada");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if(jugador.getNivel() >= 1){
                    this.Hab1.setText("Estocada");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }
            }
                //HABILIDADES DEL MAGO
             if(jugador.getClase().equals("Mago")){
                if(jugador.getNivel() >= 10){
                    this.Hab6.setText("Sanctus");
                    this.Hab6.setVisible(true);
                    this.Hab5.setText("Sombra");
                    this.Hab5.setVisible(true);
                    this.Hab4.setText("Cadena de relampagos");
                    this.Hab4.setVisible(true);
                    this.Hab3.setText("Cura");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Carambano");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Bola de fuego");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if(jugador.getNivel() >= 8){
                    this.Hab5.setText("Sombra");
                    this.Hab5.setVisible(true);
                    this.Hab4.setText("Cadena de relampagos");
                    this.Hab4.setVisible(true);
                    this.Hab3.setText("Cura");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Carambano");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Bola de fuego");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if( jugador.getNivel() >= 6){
                    this.Hab4.setText("Cadena de relampagos");
                    this.Hab4.setVisible(true);
                    this.Hab3.setText("Cura");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Carambano");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Bola de fuego");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if( jugador.getNivel() >= 5){
                    this.Hab3.setText("Cura");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Carambano");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Bola de fuego");
                    this.Hab1.setVisible(true);
                }else if(jugador.getNivel() >= 3){
                    this.Hab2.setText("Carambano");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Bola de fuego");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if(jugador.getNivel() >= 1){
                    this.Hab1.setText("Bola de fuego");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }
             }
               //HABILIDADES DEL ARQUERO
             if(jugador.getClase().equals("Arquero")){
                if(jugador.getNivel() >= 10){
                    this.Hab6.setText("Disparo penetrante");
                    this.Hab6.setVisible(true);
                    this.Hab5.setText("Flecha electrica");
                    this.Hab5.setVisible(true);
                    this.Hab4.setText("Flecha venenosa");
                    this.Hab4.setVisible(true);
                    this.Hab3.setText("Flecha de fuego");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Astucia de kamasylvia");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Tiro certero");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if(jugador.getNivel() >= 8){
                    this.Hab5.setText("Flecha electrica");
                    this.Hab5.setVisible(true);
                    this.Hab4.setText("Flecha venenosa");
                    this.Hab4.setVisible(true);
                    this.Hab3.setText("Flecha de fuego");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Astucia de kamasylvia");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Tiro certero");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if( jugador.getNivel() >= 6){
                    this.Hab4.setText("Flecha venenosa");
                    this.Hab4.setVisible(true);
                    this.Hab3.setText("Flecha de fuego");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Astucia de kamasylvia");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Tiro certero");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if( jugador.getNivel() >= 5){
                    this.Hab3.setText("Flecha de fuego");
                    this.Hab3.setVisible(true);
                    this.Hab2.setText("Astucia de kamasylvia");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Tiro certero");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if(jugador.getNivel() >= 3){
                    this.Hab2.setText("Astucia de kamasylvia");
                    this.Hab2.setVisible(true);
                    this.Hab1.setText("Tiro certero");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }else if(jugador.getNivel() >= 1){
                    this.Hab1.setText("Tiro certero");
                    this.Hab1.setVisible(true);
                    this.skills.setVisible(true);
                }
            
             }   
    }//GEN-LAST:event_IniciarActionPerformed
    //  FIN BOTON INICIAR
    // BOTONES DE HABILIDADES
    private void Hab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hab1ActionPerformed
        
        //ESTOCADA
        if(jugador.getClase().equals("Guerrero")){
            if(jugador.getMp() - 6 >= 0){
            jugador.setMp(jugador.getMp() - 6);
            causado = jugador.calcSkill(jugador, enemigo, 10);
            jugador.setMp(jugador.getMp()- 6);
            enemigo.setHp(enemigo.getHp() -causado);
                System.out.println(causado);
            mp = true;
            }else{
                mp = false;
            }
         //TIRO CERTERO
        }else if(jugador.getClase().equals("Arquero")){
           if(jugador.getMp() - 16 >= 0){
                jugador.setMp(jugador.getMp() - 16);
                causado = jugador.calcSkill(jugador, enemigo, 21);
                enemigo.setHp(enemigo.getHp() -causado);
                
                mp = true;
            }else{
                mp = false;
            }
         //BOLA DE FUEGO  
        }else if(jugador.getClase().equals("Mago")){
            if(jugador.getMp() - 32 >= 0){
                jugador.setMp(jugador.getMp() - 32);
                causado = jugador.calcSkill(jugador, enemigo, 40);
                enemigo.setHp(enemigo.getHp() -causado);
                if(enemigo.getElemento().equals("Electrico")){
                   double bono = causado * 0.5;
                    int extra = (int) bono;
                    causado = causado + (extra);
                    elem = true;
                }
                mp = true;
            }else{
                mp = false;
            }
        }
        
        int recibido = enemigo.calcAtacar(jugador, enemigo);
        jugador.setHp(jugador.getHp()- recibido);
        seguimiento(causado, recibido, curado, dmgextra, mp, elem);
        finPartida(jugador, enemigo);
    }//GEN-LAST:event_Hab1ActionPerformed

    private void Hab4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hab4ActionPerformed

       
         
         //ESPADA DIVINA
        if(jugador.getClase().equals("Guerrero")){
            if(jugador.getMp() - 62 >= 0){
                jugador.setMp(jugador.getMp() - 62);
                causado = jugador.calcSkill(jugador, enemigo, 30);
                jugador.setHp(jugador.getHp() + causado);
                curado = causado;
                mp = true;
            if(enemigo.getElemento().equals("Oscuridad")){
                double bono = causado * 0.5;
                int extra = (int) bono;
                causado = causado + (extra);
                elem = true;
                curado = causado;
            }
            enemigo.setHp(enemigo.getHp() - causado);
            }else{
                mp = false;
            }
            //FLECHA VENENOSA PD: HAY QUE REVISARLO
        }else if(jugador.getClase().equals("Arquero")){
           if(jugador.getMp() - 78 >= 0){
                jugador.setMp(jugador.getMp() - 78);
                causado = jugador.calcSkill(jugador, enemigo, 21);
                enemigo.setHp(enemigo.getHp() -causado);
                mp = true;
            }else{
                mp = false;
            }
           //CADENA DE RELAMPAGOS
        }else if(jugador.getClase().equals("Mago")){
            if(jugador.getMp() - 137 >= 0){
                jugador.setMp(jugador.getMp() - 137);
                causado = jugador.calcSkill(jugador, enemigo, 84);
                enemigo.setHp(enemigo.getHp() - causado);
                mp = true;
                if(enemigo.getElemento().equals("Agua")){
                    double bono = causado * 0.5;
                    int extra = (int) bono;
                    causado = causado + (extra);
                    elem = true;
                }
            }else{
                mp = false;
            }
        }
        
        int recibido = enemigo.calcAtacar(jugador, enemigo);
        jugador.setHp(jugador.getHp()- recibido);
        seguimiento(causado, recibido, curado, dmgextra, mp, elem);
        finPartida(jugador, enemigo);
    }//GEN-LAST:event_Hab4ActionPerformed

    private void Hab5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hab5ActionPerformed

         
         //Golpe de berserker
        if(jugador.getClase().equals("Guerrero")){
            if(jugador.getMp() - 84 >= 0){
                jugador.setMp(jugador.getMp() - 84);
                causado = jugador.calcSkill(jugador, enemigo, 80);
                enemigo.setHp(enemigo.getHp() - causado);
                mp = true;
            }else{
                mp = false;
            }
            //Flecha electrica
        }else if(jugador.getClase().equals("Arquero")){
           if(jugador.getMp() - 78 >= 0){
                jugador.setMp(jugador.getMp() - 78);
                causado = jugador.calcSkill(jugador, enemigo, 51);
                enemigo.setHp(enemigo.getHp() -causado);
                mp = true;
                if(enemigo.getElemento().equals("Agua")){
                    double bono = causado * 0.5;
                     int extra = (int) bono;
                     causado = causado + (extra);
                     elem = true;
                }
            }else{
                mp = false;
            }
           //Sombra
        }else if(jugador.getClase().equals("Mago")){
            if(jugador.getMp() - 170 >= 0){
                jugador.setMp(jugador.getMp() - 170);
                causado = jugador.calcSkill(jugador, enemigo, 128);
                enemigo.setHp(enemigo.getHp() -causado);
                mp = true;
                if(enemigo.getElemento().equals("Luz")){
                    double bono = causado * 0.5;
                    int extra = (int) bono;
                    causado = causado + (extra);
                    elem = true;
                }
            }else{
                mp = false;
            }
        }
        
        int recibido = enemigo.calcAtacar(jugador, enemigo);
        jugador.setHp(jugador.getHp()- recibido);
        seguimiento(causado, recibido, curado, dmgextra, mp, elem);
        finPartida(jugador, enemigo);
    }//GEN-LAST:event_Hab5ActionPerformed

    private void Hab6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hab6ActionPerformed

         //Ensartar
        if(jugador.getClase().equals("Guerrero")){
            if(jugador.getMp() - 53 >= 0){
                jugador.setMp(jugador.getMp() - 53);
                causado = jugador.calcSkill(jugador, enemigo, 37);
                enemigo.setHp(enemigo.getHp() - causado);
                mp = true;
                
            }else{
                mp = false;
            }
            //Disparo penetrante
        }else if(jugador.getClase().equals("Arquero")){
           if(jugador.getMp() - 103 >= 0){
                jugador.setMp(jugador.getMp() - 103);
                causado = jugador.calcSkill(jugador, enemigo, 106);
                enemigo.setHp(enemigo.getHp() -causado);
                mp = true;
            }else{
                mp = false;
            }
           //Sanctus
        }else if(jugador.getClase().equals("Mago")){
            if(jugador.getMp() - 230 >= 0){
                jugador.setMp(jugador.getMp() - 230);
                causado = jugador.calcSkill(jugador, enemigo, 164);
                enemigo.setHp(enemigo.getHp() - causado);
                mp = true;
                if(enemigo.getElemento().equals("Oscuridad")){
                    double bono = causado * 0.5;
                    int extra = (int) bono;
                    causado = causado + (extra);
                    elem = true;
                }
            }else{
                mp = false;
            }
        }
        
        int recibido = enemigo.calcAtacar(jugador, enemigo);
        jugador.setHp(jugador.getHp()- recibido);
        seguimiento(causado, recibido, curado, dmgextra, mp, elem);
        finPartida(jugador, enemigo);
    }//GEN-LAST:event_Hab6ActionPerformed

    private void Hab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hab2ActionPerformed

         
         //EJECUTAR
        if(jugador.getClase().equals("Guerrero")){
            if(jugador.getMp() - 18 >= 0){
                jugador.setMp(jugador.getMp() - 18);
                causado = jugador.calcSkill(jugador, enemigo, 23);
                mp = true;
            if(enemigo.getHp() <= enemigo.getMaxHp() * 0.3 ){//retocar
                double bono = causado * 0.5;
                int extra = (int) bono;
                causado = causado + extra;
                dmgextra = true;
            }
            enemigo.setHp(enemigo.getHp() - causado);
            }else{
                mp = false;
            }
            //ASTUCIA DE KAMASYLVIA
        }else if(jugador.getClase().equals("Arquero")){
           if(jugador.getMp() - 33 >= 0){
                jugador.setMp(jugador.getMp() - 33);
                jugador.setHp(jugador.getHp() + 24);
                curado = 24;
                causado = jugador.calcSkill(jugador, enemigo, 21);
                enemigo.setHp(enemigo.getHp() -causado);
                mp = true;
            }else{
                mp = false;
            }
           //CARAMBANO
        }else if(jugador.getClase().equals("Mago")){
            if(jugador.getMp() - 48 >= 0){
                jugador.setMp(jugador.getMp() - 48);
                causado = jugador.calcSkill(jugador, enemigo, 57);
                enemigo.setHp(enemigo.getHp() -causado);
                mp = true;
                if(enemigo.getElemento().equals("Fuego")){
                    double bono = causado * 0.5;
                    int extra = (int) bono;
                    causado = causado + (extra);
                    elem = true;
                }
            }else{
                mp = false;
            }
        }
        
        int recibido = enemigo.calcAtacar(jugador, enemigo);
        jugador.setHp(jugador.getHp()- recibido);
        seguimiento(causado, recibido, curado, dmgextra, mp, elem);
        finPartida(jugador, enemigo);
    }//GEN-LAST:event_Hab2ActionPerformed

    private void Hab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hab3ActionPerformed

         boolean dmgextra  = false;
         //GOLPE DE ESCUDO
        if(jugador.getClase().equals("Guerrero")){
            if(jugador.getMp() - 11 >= 0){
                jugador.setMp(jugador.getMp() - 11);
                causado = jugador.calcSkill(jugador, enemigo, 16);
                enemigo.setHp(enemigo.getHp() - causado);
                mp = true;
            }else{
                mp = false;
            }
            //FLECHA DE FUEGO
        }else if(jugador.getClase().equals("Arquero")){
           if(jugador.getMp() - 40 >= 0){
                jugador.setMp(jugador.getMp() - 40);
                causado = jugador.calcSkill(jugador, enemigo, 50);
                 if(enemigo.getElemento().equals("Electrico")){
                    double bono = causado * 0.5;
                    int extra = (int) bono;
                    causado = causado + (extra);
                    elem = true;
                    mp = true;
                }
                enemigo.setHp(enemigo.getHp() -causado);
            }else{
                mp = false;
            }
           //CURA
        }else if(jugador.getClase().equals("Mago")){
            if(jugador.getMp() - 200 >= 0){
                jugador.setMp(jugador.getMp() - 200);
                jugador.setHp(jugador.getHp() + 300);
                curado = 300;
               mp = true;
            }else{
                mp = false;
            }
        }
        
        int recibido = enemigo.calcAtacar(jugador, enemigo);
        jugador.setHp(jugador.getHp()- recibido);
        seguimiento(causado, recibido, curado, dmgextra, mp, elem);
        finPartida(jugador, enemigo);    }//GEN-LAST:event_Hab3ActionPerformed
  //METODOS
    public void finPartida(Jugador jugador, Monstruo enemigo){
         //Has perdido
        if(jugador.getHp() <= 0 ){
            charSelect ventana = new charSelect();
            ventana.lblPersonaje.setText(jugador.getNombre());
            JOptionPane.showMessageDialog(null, "Has muerto... \n" + jugador.getNombre(), "Derrota", JOptionPane.ERROR_MESSAGE);
            ventana.setVisible(true);
            this.dispose();
            //Has ganado
        }else if(enemigo.getHp() <= 0){
            jugador = gestion.setJugador(jugador, this.Pers.getText());
            charSelect ventana = new charSelect();
            gestion.lootGold(jugador, enemigo.getDinero());
            gestion.obtenerExp(jugador.getNombre());
            int expTotal = gestion.sumarExp(jugador.getNombre(),gestion.obtenerExp(jugador.getNombre()) , enemigo.getExp());
            //Sube de nivel
            if(jugador.getNivel() != jugador.levelUp(expTotal)){
                 //SUBIMOS LOS STATS AL SUBIR DE LVL
                 gestion.levelUpSQL(jugador.getNombre(),jugador.levelUp(expTotal));
                 //SEGUN QUE CLASE SEA AUMENTARA UNOS PARAMETROS U OTROS EN MAYOR/MENOR CANTIDAD
                 if(jugador.getClase().equals("Guerrero")) {
                 gestion.subirStatsWarr(jugador.getNombre(), jugador);
                 }else if(jugador.getClase().equals("Arquero")){
                 gestion.subirStatsArcher(jugador.getNombre(), jugador);
                 }else if(jugador.getClase().equals("Mago")){
                 gestion.subirStatsMago(jugador.getNombre(), jugador);
                 }
                 JOptionPane.showMessageDialog(null, "¡Felicidades " + jugador.getNombre() + "!" + "\n has subido de nivel!" , "Level Up!",JOptionPane.INFORMATION_MESSAGE);
            }
            ventana.lblPersonaje.setText(jugador.getNombre());
            JOptionPane.showMessageDialog(null, "¡Felicidades " + jugador.getNombre() + "!" + "\n has completado el piso1" , "Victoria",JOptionPane.INFORMATION_MESSAGE);
            ventana.setVisible(true);
            this.dispose();
        }
    }
    public void seguimiento(int causado, int recibido, int curado, boolean extra, boolean mp, boolean elem){
        //Solo haces daño
        if(causado > 0 && curado == 0 && extra == false){
          Consola.setText(
                "Infliges: " + causado + " de daño al enemigo"+ "\n" +
            "Salud total del enemigo:" + enemigo.getHp() + "\n"+
            "Te infligen: " + recibido + " de daño como contraataque" + "\n" +
            "Tu salud: " + jugador.getHp());
          //Solo te curas
        }else  if(causado > 0 && curado == 0 && elem == true){
          Consola.setText(
                  "TU HABILIDAD LE HACE DAÑO EXTRA ELEMENTAL!"+
                "Infliges: " + causado + " de daño elemental al enemigo"+ "\n" +
            "Salud total del enemigo:" + enemigo.getHp() + "\n"+
            "Te infligen: " + recibido + " de daño como contraataque" + "\n" +
            "Tu salud: " + jugador.getHp());
        }else if (causado == 0 && curado > 0 && extra == false){
          Consola.setText(
                "Te curas: " + curado + "\n" +
            "Te infligen: " + recibido + " de daño como contraataque" + "\n" +
            "Tu salud: " + jugador.getHp());
          //Daño + curación
        }else if(causado >0 && curado >0 && extra == false){
              Consola.setText(
                   "Infliges: " + causado + " de daño al enemigo"+ "\n" +
             "Y te has curado: " + curado + " puntos de salud \n" +
            "Salud total del enemigo:" + enemigo.getHp() + "\n"+
            "Te infligen: " + recibido + " de daño como contraataque" + "\n" +
            "Tu salud: " + jugador.getHp());
         //Falta de MP para la habilidad
        }else if(mp == false){
            Consola.setText("No tienes suficiente MP para está habilidad \n" +
                    "Tu enemigo te golpea, aprovechando la oportunidad \n" +
                    "Te inflige " + recibido);
            
        }else if(causado == 0 && curado == 0 && recibido == 0){
            Consola.setText("Habeis fallado ambos ataques");
        }else if ( causado == 0 && curado == 0 && recibido > 0 ){
            Consola.setText("Has fallado tu ataque, sin embargo tu enemigo acierta \n" + recibido);
                    
        }else if (causado > 0 && curado >= 0 && recibido == 0 ){
              Consola.setText(
                   "Infliges: " + causado + " de daño al enemigo"+ "\n" +
             "Y te has curado: " + curado + " puntos de salud \n" +
            "Salud total del enemigo:" + enemigo.getHp() + "\n"+
            "Tu enemigo ha fallado su ataque ");
        }
        //Actualizacion de los datos del jugador y del enemigo en sus respectivas consolas
        CharInfo.setText(jugador.toString());
        enemyArea.setText(enemigo.toString());
        
    }
    
    
    
    // FIN METODOS
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Atacar;
    private javax.swing.JTextArea CharInfo;
    private javax.swing.JTextArea Consola;
    private javax.swing.JButton Hab1;
    private javax.swing.JButton Hab2;
    private javax.swing.JButton Hab3;
    private javax.swing.JButton Hab4;
    private javax.swing.JButton Hab5;
    private javax.swing.JButton Hab6;
    private javax.swing.JButton Iniciar;
    public javax.swing.JLabel Pers;
    private javax.swing.JTextArea enemyArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel skills;
    // End of variables declaration//GEN-END:variables

}
